{"/home/travis/build/kaizhu256/node-elasticsearch-lite/test.js":"/* istanbul instrument in package elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('./assets.utility2.rollup.js')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local.testCase_middlewareRouterCustom_default = function (options, onError) {\n        /*\n         * this function will test middlewareRouterCustom's default handling-behavior\n         */\n            options = {\n                list: [{\n                    method: 'GET',\n                    url: '/__info'\n                }, {\n                    method: 'GET',\n                    url: '/_alias'\n                }, {\n                    method: 'PUT',\n                    data: '{\"index\":{\"_id\":null,\"_index\":\"server_log\",\"_type\":\"test\"}}\\n{}\\n',\n                    url: '/_bulk'\n                }, {\n                    method: 'GET',\n                    url: '/kibana'\n                }, {\n                    method: 'GET',\n                    url: '/kibana/'\n                }, {\n                    method: 'OPTIONS',\n                    url: '/undefined'\n                }]\n            };\n            local.onParallelList(options, function (options2, onParallel) {\n                onParallel.counter += 1;\n                local.ajax(options2.element, onParallel);\n            }, onError);\n        };\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - function\n    case 'node':\n        local.testCase_buildApp_default = function (options, onError) {\n        /*\n         * this function will test buildApp's default handling-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [{\n                file: '/kibana/app/app.js',\n                url: '/kibana/app/app.js'\n            }, {\n                file: '/kibana/config.js',\n                url: '/kibana/config.js'\n            }, {\n                file: '/kibana/app/dashboards/logstash.json',\n                url: '/kibana/app/dashboards/logstash.json'\n            }];\n            local.buildApp(options, onError);\n            local.child_process.execSync(\n                'mkdir -p tmp/build/app/ && cp -a external/kibana tmp/build/app/',\n                { stdio: ['ignore', 2, 2] }\n            );\n        };\n\n        local.testCase_killElasticsearch_default = function (options, onError) {\n        /*\n         * this function will test killElasticsearch's default handling-behavior\n         */\n            options = [\n                [process, { kill: local.nop }]\n            ];\n            local.testMock(options, function (onError) {\n                local.killElasticsearch();\n                onError();\n            }, onError);\n        };\n\n        local.testCase_middlewareBulkPut_default = function (options, onError) {\n        /*\n         * this function will test middlewareBulkPut's default handling-behavior\n         */\n            options = {\n                list: [{\n                    method: 'GET',\n                    url: '/__info'\n                }, {\n                    method: 'GET',\n                    url: '/_alias'\n                }, {\n                    method: 'PUT',\n                    data: '{\"index\":{\"_id\":null,\"_index\":\"server_log\",\"_type\":\"test\"}}\\n{}\\n',\n                    url: '/_bulk'\n                }, {\n                    method: 'GET',\n                    url: '/kibana'\n                }, {\n                    method: 'GET',\n                    url: '/kibana/'\n                }, {\n                    method: 'OPTIONS',\n                    url: '/undefined'\n                }]\n            };\n            local.onParallelList(options, function (options2, onParallel) {\n                onParallel.counter += 1;\n                local.ajax(options2.element, onParallel);\n            }, onError);\n        };\n\n        // coverage-hack - re-run serverStart\n        local.serverStart();\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-elasticsearch-lite/lib.elasticsearch.js":"///usr/bin/env node\n/* istanbul instrument in package elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.elasticsearch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_elasticsearch = local;\n        } else {\n            // require builtins\n            Object.keys(process.binding('natives')).forEach(function (key) {\n                if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                    local[key] = require(key);\n                }\n            });\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local.killElasticsearch = function () {\n        /*\n         * this function will kill elasticsearch\n         */\n            process.kill(local.global.utility2_processElasticsearch1.pid);\n        };\n\n        local.middlewareBulkPut = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware,\n         * that will bulk upsert documents into elasticsearch\n         */\n            var options, tmp;\n            options = {};\n            local.onNext(options, function (error, data) {\n                switch (options.modeNext) {\n                case 1:\n                    nextMiddleware = nextMiddleware || local.onErrorDefault;\n                    if (!request) {\n                        request = local.middlewareBulkPutList.shift();\n                        if (!request) {\n                            return;\n                        }\n                        local.middlewareBulkPut(request, null, nextMiddleware);\n                        return;\n                    }\n                    if (!response) {\n                        response = { end: local.nop };\n                        options.onNext(null, request.data);\n                        return;\n                    }\n                    // read request-body\n                    local.streamReadAll(request, options.onNext);\n                    break;\n                case 2:\n                    options.data = new Buffer(data).toString();\n                    // forward-proxy request to elasticsearch\n                    local.ajax({\n                        data: options.data,\n                        method: 'put',\n                        url: local.serverLocalHostElasticsearch + request.url\n                    }, options.onNext);\n                    break;\n                case 3:\n                    // successful operation\n                    if (data.responseText.slice(0, 256).indexOf(',\"errors\":false,') >= 0) {\n                        response.end(data.responseText);\n                        return;\n                    }\n                    // fallback\n                    options.data = options.data.split('\\n');\n                    options.responseJson = JSON.parse(data.responseText);\n                    options.result = '';\n                    options.responseJson.items.forEach(function (element, ii) {\n                        tmp = element.create || element.index;\n                        if (tmp.status < 300) {\n                            return;\n                        }\n                        tmp.status = tmp === element.create\n                            ? 201\n                            : 200;\n                        options.result += JSON.stringify({\n                            _id: tmp.id,\n                            _index: tmp.index,\n                            _type: tmp.type\n                        }) + '\\n';\n                        options.result += options.data[2 * ii + 1] + '\\n';\n                    });\n                    response.end(JSON.stringify(data.responseJson));\n                    local.middlewareBulkPutList.push({\n                        data: options.result,\n                        url: request.url\n                    });\n                    break;\n                default:\n                    nextMiddleware(error);\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.middlewareRouterCustom = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will route elasticsearch requests\n         */\n            var requestBackend, responseBackend;\n            switch (request.urlParsed.pathname) {\n            // redirect to kibana\n            case '/kibana':\n            case '/kibana/':\n                response.writeHead(307, {\n                    location: '/kibana/index.html' + (request.urlParsed.search || '')\n                });\n                response.end();\n                break;\n            default:\n                local.serverRespondCors(request, response);\n                if (request.method === 'OPTIONS') {\n                    response.end();\n                    return;\n                }\n                local.serverRespondHeadSet(request, response, null, {\n                    'content-type': 'application/json'\n                });\n                switch (request.swgg.crud.operationId) {\n                // handle _bulk upsert\n                case '/_bulk.put':\n                case '/{index}/_bulk.put':\n                case '/{index}/{type}/_bulk.put':\n                    local.middlewareBulkPut(request, response, nextMiddleware);\n                    return;\n                }\n                // forward-proxy request to elasticsearch\n                requestBackend = local.http.request({\n                    method: request.method,\n                    path: request.swgg.crud.operationId === '/__info.get'\n                        ? '/'\n                        : request.url,\n                    port: local.serverLocalHostElasticsearch.split(':')[2]\n                }, function (_response) {\n                    responseBackend = _response.on('error', nextMiddleware);\n                    responseBackend.pipe(response);\n                }).on('error', nextMiddleware);\n                request.pipe(requestBackend);\n            }\n        };\n\n        local.serverStart = function (options) {\n            if (local.global.utility2_rollup || local.global.utility2_processElasticsearch1) {\n                return;\n            }\n            // start server\n            local.objectSetDefault(local.env, { PORT: '9200' });\n            local.utility2.middlewareList = [\n                local.middlewareInit,\n                local.middlewareForwardProxy,\n                local.middlewareAssetsCached,\n                local.swgg.middlewareRouter,\n                local.swgg.middlewareUserLogin,\n                local.middlewareJsonpStateInit,\n                local.middlewareRouterCustom,\n                local.middlewareBodyRead,\n                local.swgg.middlewareBodyParse,\n                local.swgg.middlewareValidate,\n                local.swgg.middlewareCrudBuiltin,\n                local.swgg.middlewareCrudEnd\n            ];\n            local.testRunServer(local);\n            // init assets - swgg\n            local.assetsDict['/'] =\n                local.assetsDict['/index.html'] =\n                local.assetsDict['/assets.index.template.html'] =\n                local.assetsDict['/assets.swgg.html'];\n            local.assetsDict['/assets.swgg.swagger.json'] =\n                local.fs.readFileSync(__dirname + '/assets.swgg.swagger.json');\n            local.apiDictUpdate(require('./assets.swgg.swagger.json'));\n            // init assets - kibana\n            local.onReadyBefore.counter += 1;\n            local.child_process.exec('find kibana', {\n                cwd: __dirname + '/external'\n            }, function (error, data) {\n                // validate no error occurred\n                local.assert(!error, error);\n                local.onParallelList({\n                    list: data.toString().split('\\n')\n                }, function (options2, onParallel) {\n                    onParallel.counter += 1;\n                    local.fs.readFile(__dirname + '/external/' + options2.element, function (\n                        error,\n                        data\n                    ) {\n                        if (error) {\n                            onParallel();\n                            return;\n                        }\n                        switch (options2.element) {\n                        case 'kibana/app/app.js':\n                            data = 'var local={};local.githubCorsUrlOverride=' +\n                                local.githubCorsUrlOverride.toString().trim() + ';\\n' + data\n                                .toString()\n                                // githubCorsHost\n                                .replace(\n                                    'v.open(e,i,!0)',\n                                    'v.open(e,local.githubCorsUrlOverride(i,' +\n                                        '\"https://h1-elasticsearch-alpha.herokuapp.com\",' +\n                                        '(/^(' +\n                                        '\\\\/_\\\\w|' +\n                                        '\\\\/[^\\\\/].*?\\\\/_\\\\w|' +\n                                        '\\\\/kibana-int\\\\/' +\n                                        ')/)),!0)'\n                                );\n                            break;\n                        case 'kibana/config.js':\n                            data = data\n                                .toString()\n                                // strip port 9200 from kibana\n                                .replace('\"http://\"+window.location.hostname+\":9200\"', '\"\"');\n                            break;\n                        case 'kibana/app/dashboards/logstash.json':\n                            data = data\n                                .toString()\n                                // relax logstash index-filter\n                                .replace('\"interval\": \"day\",', '\"interval\": \"none\",')\n                                .replace(\n                                    '\"default\": \"NO_TIME_FILTER_OR_INDEX_PATTERN_NOT_MATCHED\"',\n                                    '\"default\": \"_all\"'\n                                );\n                            break;\n                        }\n                        local.assetsDict['/' + options2.element] = data;\n                        onParallel();\n                    });\n                }, local.onReadyBefore);\n            });\n            // init serverLocalHostElasticsearch\n            local.serverLocalHostElasticsearch = 'http://127.0.0.1:' +\n                (Number(local.env.PORT) + 1);\n            // start elasticsearch-server\n            console.error('starting elasticsearch-server ...');\n            local.onResetAfter(function () {\n                local.onResetAfterElasticsearch = true;\n            });\n            local.onResetBefore.counter += 1;\n            local.timerIntervalElasticsearchStatus = setInterval(function () {\n                local.ajax({ url: local.serverLocalHostElasticsearch }, function (error) {\n                    if (error) {\n                        return;\n                    }\n                    clearInterval(local.timerIntervalElasticsearchStatus);\n                    console.error('elasticsearch-server listening on http-port' +\n                        local.serverLocalHostElasticsearch.split(':')[2]);\n                    local.onResetBefore();\n                });\n            }, 1000);\n            // init argv\n            local.objectSetDefault(options, { argv: [] });\n            [\n                '-Des.http.port=' + local.serverLocalHostElasticsearch.split(':')[2],\n                '-Des.path.data=' + process.cwd() + '/tmp/elasticsearch.data.' +\n                    local.env.NODE_ENV,\n                // coverage-hack - test redundant arg\n                '',\n                ''\n            ].forEach(function (arg) {\n                if (options.argv.indexOf(arg) < 0) {\n                    options.argv.push(arg);\n                }\n            });\n            local.global.utility2_processElasticsearch1 = local.child_process.spawn(\n                __dirname + '/external/elasticsearch/bin/elasticsearch',\n                options.argv,\n                { stdio: ['ignore', 1, 2] }\n            ).on('exit', local.exit);\n            process.on('exit', local.killElasticsearch);\n            // init middlewareBulkPutList\n            local.middlewareBulkPutList = [];\n            setInterval(local.middlewareBulkPut, 1000);\n        };\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        if (local.global.utility2_rollup) {\n            break;\n        }\n        // init utility2\n        local.utility2 = local.utility2 || require('./assets.utility2.rollup.js');\n        local.utility2.objectSetDefault(local, local.utility2);\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        switch (process.argv[2]) {\n        case '--help':\n        case '-h':\n        case '-v':\n            local.child_process.spawnSync(\n                __dirname + '/external/elasticsearch/bin/elasticsearch',\n                process.argv.slice(2),\n                { stdio: ['ignore', 1, 2] }\n            );\n            return;\n        }\n        local.serverStart({ argv: process.argv.slice(2) });\n        // init exports\n        local.global.local = local;\n        // start repl-debugger\n        local.replStart();\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-elasticsearch-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web demo of elasticsearch-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install elasticsearch-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_elasticsearch\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - function\n    case 'node':\n        local.serverStart({ port: Number(process.env.PORT) });\n        // push serverLog to elasticsearch\n        local.utility2.serverLog = function (options) {\n            console.error('serverLog - ' + JSON.stringify(options));\n            if (!local.onResetAfterElasticsearch) {\n                return;\n            }\n            options = local.jsonCopy(options);\n            options['@timestamp'] = options.time;\n            local.middlewareBulkPut({\n                data: JSON.stringify({ index: {\n                    _index: 'server_log',\n                    _type: options.type\n                } }) + '\\n' + JSON.stringify(options) + '\\n',\n                url: '/server_log/server_response/_bulk'\n            });\n        };\n        // test serverLog\n        local.ajax({ url: local.serverLocalHost }, local.onErrorDefault);\n        local.onReadyBefore.counter += 1;\n        local.onResetAfter(function () {\n            local.ajax({ url: local.serverLocalHost }, function (error) {\n                local.onErrorDefault(error);\n                local.onReadyBefore();\n            });\n        });\n        break;\n    }\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.maxHeight === '0px') {\n                    local.uiAnimateSlideDown(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    local.uiAnimateSlideUp(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        Object.keys(process.binding('natives')).forEach(function (key) {\n            if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                local[key] = require(key);\n            }\n        });\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        [\n            'assets.index.css',\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                // jslint-hack\n                String(match0);\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'elasticsearch-lite';\n                case 'npm_package_nameLib':\n                    return 'elasticsearch';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.elasticsearch.js'] =\n            local.assetsDict['/assets.elasticsearch.js'] ||\n            local.fs.readFileSync(\n                local.elasticsearch.__dirname + '/lib.elasticsearch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}